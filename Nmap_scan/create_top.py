import os
import sys
import csv
from jinja2 import Environment, select_autoescape, FileSystemLoader

TOPOLOGY_PATH = "../MulVAL_P/"
REAL_ATTACK_TOPOLOGY = "real_topology_1.P"
REAL_ATTACK_TOPOLOGY_VERSION = "1"  # must match the topology index above

env = Environment(loader=FileSystemLoader(TOPOLOGY_PATH), autoescape=select_autoescape('P'))
template = env.get_template(REAL_ATTACK_TOPOLOGY)

def read_vul_info():
    info_list = []
    with open("vul_info.txt") as vul_file:
        for line in vul_file:
            info_list.append(line.strip('\n'))
    return info_list

def read_scan_config():
    host_list = []
    ip_list = []
    with open('scan_config.csv', 'r') as csvfile:
        csv_read = csv.reader(csvfile)
        for row in csv_read:
            host_list.append(row[0])
            ip_list.append(row[1])
    return host_list, ip_list

def deJsonTop_v1(webTemp, fileTemp):
    with open('./attack.P', 'w') as baiscFile:
        attack_temp = template.render(CVE_Id_Web=webTemp[2], CVE_Id_File=fileTemp[2])
        baiscFile.write(attack_temp)
    print("Generate scan topology v1 P file successfully")

def deJsonTop_v2(webTemp, fileTemp, fireTemp):
    with open('./attack.P', 'w') as baiscFile:
        attack_temp = template.render(CVE_Id_Web=webTemp[2], CVE_Id_File=fileTemp[2], CVE_Id_Fire=fireTemp[2])
        baiscFile.write(attack_temp)
    print("Generate scan topology v2 P file successfully")

if __name__ == "__main__":
    if os.path.exists('./attack.P'):
        print("attack.P already exists. Skipping generation.")
        sys.exit(0)

    webTemp, fileTemp, fireTemp = [], [], []
    host_list, ip_list = read_scan_config()
    count_ip = 0

    for host in host_list:
        print(f"Run Nmap on target '{host}' ({ip_list[count_ip].strip()})...")
        if host in ['webServer', 'fileServer', 'fireWall']:
            os.system(f'sudo nmap -sV -oX ./--version-all --script vuln {ip_list[count_ip]} -oN nmap.txt')
            status = os.system('python2 decode_nmap.py')
            if os.WEXITSTATUS(status) != 0:
                print("ERROR: Nmap encountered a problem")
                sys.exit(1)
            vul_info = read_vul_info()
            if host == 'webServer':
                webTemp = vul_info
            elif host == 'fileServer':
                fileTemp = vul_info
            elif host == 'fireWall':
                fireTemp = vul_info
        count_ip += 1

    if REAL_ATTACK_TOPOLOGY_VERSION == '1':
        deJsonTop_v1(webTemp, fileTemp)
    elif REAL_ATTACK_TOPOLOGY_VERSION == '2':
        deJsonTop_v2(webTemp, fileTemp, fireTemp)

